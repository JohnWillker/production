#!/bin/bash

set -euxo pipefail

locale-gen en_GB.UTF-8
hostnamectl set-hostname $(curl http://169.254.169.254/latest/meta-data/local-hostname)

mkdir -p /etc/kubernetes/pki/etcd

#Get etcd certificates
aws ssm get-parameters --names "etcd-ca" --query '[Parameters[0].Value]' --output text  --with-decryption --region "${aws_region}" > /etc/kubernetes/pki/etcd/ca.crt
aws ssm get-parameters --names "etcd-server" --query '[Parameters[0].Value]' --output text  --with-decryption --region "${aws_region}" > /etc/kubernetes/pki/apiserver-etcd-client.crt
aws ssm get-parameters --names "etcd-server-key" --query '[Parameters[0].Value]' --output text  --with-decryption --region "${aws_region}" > /etc/kubernetes/pki/apiserver-etcd-client.key

kubeadm init --config /opt/kubeadm-config.yaml --ignore-preflight-errors=all

# configure kubeconfig for kubectl
mkdir -p /root/.kube
cp -i /etc/kubernetes/admin.conf /root/.kube/config
chown $(id -u):$(id -g) /root/.kube/config

#Install cilium cni
kubectl --kubeconfig=/etc/kubernetes/admin.conf create -f https://raw.githubusercontent.com/cilium/cilium/v1.5/examples/kubernetes/1.14/cilium.yaml

#This is a requirement for some CNI plugins to work
sysctl net.bridge.bridge-nf-call-iptables=1

sleep 5
# initial master
aws ssm put-parameter --name "kube-config" --value "$(cat /etc/kubernetes/admin.conf)"  --type "SecureString" --region "${aws_region}" --overwrite
aws ssm put-parameter --name "k8s-ca" --value "$(cat /etc/kubernetes/pki/ca.crt)"  --type "SecureString" --region "${aws_region}" --overwrite
aws ssm put-parameter --name "k8s-ca-key" --value "$(cat /etc/kubernetes/pki/ca.key)"  --type "SecureString" --region "${aws_region}" --overwrite
aws ssm put-parameter --name "k8s-sa" --value "$(cat /etc/kubernetes/pki/sa.pub)"  --type "SecureString" --region "${aws_region}" --overwrite
aws ssm put-parameter --name "k8s-sa-key" --value "$(cat /etc/kubernetes/pki/sa.key)"  --type "SecureString" --region "${aws_region}" --overwrite
aws ssm put-parameter --name "k8s-front-proxy-ca" --value "$(cat /etc/kubernetes/pki/front-proxy-ca.crt)"  --type "SecureString" --region "${aws_region}" --overwrite
aws ssm put-parameter --name "k8s-front-proxy-ca-key" --value "$(cat /etc/kubernetes/pki/front-proxy-ca.key)"  --type "SecureString" --region "${aws_region}" --overwrite

sleep 5
#Upload certificates
aws ssm put-parameter --name "k8s-init-token" --value "$(kubeadm token create)"  --type "SecureString" --region "${aws_region}" --overwrite
aws ssm put-parameter --name "k8s-init-token-hash" --value "$(openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //')"  --type "SecureString" --region "${aws_region}" --overwrite


#Helm install

curl -s https://raw.githubusercontent.com/helm/helm/master/scripts/get | bash

kubectl --kubeconfig=/etc/kubernetes/admin.conf create serviceaccount tiller --namespace kube-system

kubectl --kubeconfig=/etc/kubernetes/admin.conf create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller

helm --kubeconfig=/etc/kubernetes/admin.conf init --wait --service-account tiller

helm --kubeconfig=/etc/kubernetes/admin.conf repo update

#Istio Install
export ISTIO_VERSION="1.2.2"
test -d /tmp || mkdir /tmp
cd /tmp
curl -sL https://git.io/getLatestIstio | sh -
cd istio*

helm --kubeconfig=/etc/kubernetes/admin.conf install install/kubernetes/helm/istio-init --wait \
     --name istio-init --namespace istio-system --set certmanager.enabled=false

sleep 60

helm --kubeconfig=/etc/kubernetes/admin.conf install install/kubernetes/helm/istio --wait --name istio --namespace istio-system \
     --set grafana.enabled=true \
     --set kiali.enabled=true \
     --set kiali.createDemoSecret=true \
     --set kiali.contextPath=/ \
     --set servicegraph.enabled=true \
     --set tracing.enabled=true

sleep 30


#Configure the Istio services
cat << EOF | kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f -
---
##################
# Grafana
##################
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: grafana-destination-rule
  namespace: istio-system
spec:
  host: grafana.istio-system.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: grafana-virtual-service
  namespace: istio-system
spec:
  hosts:
  - "grafana.devopxlabs.com"
  gateways:
  - istio-autogenerated-k8s-ingress
  http:
  - route:
    - destination:
        host: grafana.istio-system.svc.cluster.local
        port:
          number: 3000
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: grafana-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 15031
      name: http2-grafana
      protocol: HTTP2
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: grafana-vs
  namespace: istio-system
spec:
  hosts:
  - "*"
  gateways:
  - grafana-gateway
  http:
  - match:
    - port: 15031
    route:
    - destination:
        host: grafana.istio-system.svc.cluster.local
        port:
          number: 3000
---
##################
# Jaeger
##################
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: jaeger-destination-rule
  namespace: istio-system
spec:
  host: tracing.istio-system.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: jaeger-virtual-service
  namespace: istio-system
spec:
  hosts:
  - "jaeger.devopxlabs.com"
  gateways:
  - istio-autogenerated-k8s-ingress
  http:
  - route:
    - destination:
        host: tracing.istio-system.svc.cluster.local
        port:
          number: 80
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: tracing-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 15032
      name: http2-tracing
      protocol: HTTP2
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: tracing-vs
  namespace: istio-system
spec:
  hosts:
  - "*"
  gateways:
  - tracing-gateway
  http:
  - match:
    - port: 15032
    route:
    - destination:
        host: tracing.istio-system.svc.cluster.local
        port:
          number: 80
---
##################
# Kiali
##################
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: kiali-destination-rule
  namespace: istio-system
spec:
  host: kiali.istio-system.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kiali-virtual-service
  namespace: istio-system
spec:
  hosts:
  - "*"
  gateways:
  - istio-autogenerated-k8s-ingress
  http:
  - match:
    - uri:
        exact: /kiali
    route:
    - destination:
        host: kiali.istio-system.svc.cluster.local
        port:
          number: 20001
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: kiali-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 15029
      name: http2-kiali
      protocol: HTTP2
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: kiali-vs
  namespace: istio-system
spec:
  hosts:
  - "*"
  gateways:
  - kiali-gateway
  http:
  - match:
    - port: 15029
    route:
    - destination:
        host: kiali.istio-system.svc.cluster.local
        port:
          number: 20001
---
##################
# Prometheus
##################
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: prometheus-destination-rule
  namespace: istio-system
spec:
  host: prometheus.istio-system.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: prometheus-virtual-service
  namespace: istio-system
spec:
  hosts:
  - "prometheus.devopxlabs.com"
  gateways:
  - istio-autogenerated-k8s-ingress
  http:
  - route:
    - destination:
        host: prometheus.istio-system.svc.cluster.local
        port:
          number: 9090
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: prometheus-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 15030
      name: http2-prometheus
      protocol: HTTP2
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: prometheus-vs
  namespace: istio-system
spec:
  hosts:
  - "*"
  gateways:
  - prometheus-gateway
  http:
  - match:
    - port: 15030
    route:
    - destination:
        host: prometheus.istio-system.svc.cluster.local
        port:
          number: 9090
---
##################
# Servicegraph
##################
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: servicegraph-destination-rule
  namespace: istio-system
spec:
  host: servicegraph.istio-system.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: servicegraph-virtual-service
  namespace: istio-system
spec:
  hosts:
  - "servicegraph.devopxlabs.com"
  gateways:
  - istio-autogenerated-k8s-ingress
  http:
  - route:
    - destination:
        host: servicegraph.istio-system.svc.cluster.local
        port:
          number: 8088
EOF
